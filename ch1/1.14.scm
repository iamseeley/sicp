(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (display "cc called with amount: ")
  (display amount)
  (display ", kinds-of-coins: ")
  (display kinds-of-coins)
  (newline)
  (cond ((= amount 0)
         (display "=> 1 (base case: exact change)")
         (newline)
         1)
        ((or (< amount 0) (= kinds-of-coins 0))
         (display "=> 0 (base case: no change possible)")
         (newline)
         0)
        (else 
         (let ((without-this-coin (cc amount (- kinds-of-coins 1)))
               (with-this-coin (cc (- amount (first-denomination kinds-of-coins)) kinds-of-coins)))
           (display "=> ")
           (display (+ without-this-coin with-this-coin))
           (newline)
           (+ without-this-coin with-this-coin)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

(count-change 11)

